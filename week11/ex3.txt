When the output of program is going to a terminal (screen), it is line buffered. When the output of program goes to a pipe, it is fully buffered.

First code output:
Hello
Hello

Analysis:

It Copies "Hello" into the buffer for standard output. Because there is no newline at the end and the output is running in line-buffered mode (or full-buffered mode), 
nothing appears on the terminal and the it Gives us two separate processes, with exactly the same material in the stdout buffer.
The child exits normally through the return at the end of main. At that point, the residual data in the stdout buffer is flushed. 
This leaves the output position at the end of a line since there is no newline
The parent comes here and waits for the child to finish dying. Then the parent adds a newline to the output buffer. 
The newline flushes the 'Hello' message to the output, after the incomplete line generated by the child.

Second code output:
Hello
\n
\n